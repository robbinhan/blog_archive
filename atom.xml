<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title><![CDATA[Robbinhan's Blog]]></title>
  
  <link href="/atom.xml" rel="self"/>
  <link href="http://robbinhan.github.io/"/>
  <updated>2016-03-16T05:13:00.000Z</updated>
  <id>http://robbinhan.github.io/</id>
  
  <author>
    <name><![CDATA[robbinhan]]></name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title><![CDATA[PHP的Cookie删除问题]]></title>
    <link href="http://robbinhan.github.io/2016/03/16/2016-03-16/"/>
    <id>http://robbinhan.github.io/2016/03/16/2016-03-16/</id>
    <published>2016-03-16T05:27:19.000Z</published>
    <updated>2016-03-16T05:13:00.000Z</updated>
    <content type="html"><![CDATA[<p>正常情况下删除cookie就是调用setcookie方法，并且将过期时间设置为之前的时间；但是如果添加cookie的时候设置了path或者domain参数的话可能就会产生问题。<br>比方：</p>
<pre><code>setcookie<span class="list">(<span class="quoted">'test</span>',<span class="quoted">'a</span>',time<span class="list">()</span><span class="number">+3600</span>,<span class="quoted">'/</span>')</span><span class="comment">;</span>
</code></pre><p>设置test一个小时后过期，路径在’/‘，域名默认是当前的域名，比如是’www.explame.com’，然后当去删除的时候</p>
<pre><code>setcookie(<span class="string">'test'</span>,<span class="string">'a'</span>,<span class="keyword">time</span>()-<span class="number">24</span>*<span class="number">3600</span>,<span class="string">'/'</span>,<span class="string">'www.explame.com'</span>);
</code></pre><p>如果这样写是无法删除的，因为setcookie时默认会在域名前加“.”号，就变成’.www.explame.com’，所以这样写会去删除’.www.explame.com’域名下的test的cookie，而之前添加的并没有删除，解决方法其实就是添加的时候怎么写，删除的时候也怎么写，就是过期时间修改下。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>正常情况下删除cookie就是调用setcookie方法，并且将过期时间设置为之前的时间；但是如果添加cookie的时候设置了path或者domain参数的话可能就会产生问题。<br>比方：</p>
<pre><code>setcookie<span class="list]]>
    </summary>
    
  </entry>
  
  <entry>
    <title><![CDATA[Redux架构总结]]></title>
    <link href="http://robbinhan.github.io/2015/12/25/2015-12-26/"/>
    <id>http://robbinhan.github.io/2015/12/25/2015-12-26/</id>
    <published>2015-12-25T07:27:19.000Z</published>
    <updated>2015-12-26T06:21:34.000Z</updated>
    <content type="html"><![CDATA[<p>社区内比较受推崇，因为用起来相对比较简单<br><img src="media/2869996312-56737fb328792_articlex.png" alt="2869996312-56737fb328792_articlex"></p>
<p>特性：</p>
<ul>
<li>分层设计，职责清晰。</li>
<li>要求store reducer都是页面单例，易于管理。</li>
<li>action为请求dto对象，是请求类型，请求数据的载体。</li>
<li>reducer是处理请求的方法。不允许有状态，必须是纯方法。必须严格遵守输入输出，中间不允许有异步调用。不允许对state直接进行修改，要想修改必须返回新对象。</li>
<li>store</li>
<li>维持应用的state；</li>
<li>提供 getState() 方法获取 state；</li>
<li>提供 dispatch(action) 方法分发请求来更新 state；门面模式，要求所有的请求满足统一的格式【可以进行路由、监控、日志等】，统一的调用方式。</li>
<li>通过 subscribe(listener) 注册监听器监听state的变化。</li>
<li>官方文档写的较为详细，从设计到开发都有，比flux要好</li>
</ul>
<p>redux的原则:</p>
<ol>
<li><p>state不能被修改。</p>
<ul>
<li>其实这个用react的state也会有同样的问题，最好把state设计的没有冗余，尽量少出这种情况</li>
<li>解决方案：参考官方：因为我们不能直接修改却要更新数组中指定的一项数据，这里需要先把前面和后面都切开。如果经常需要这类的操作，可以选择使用帮助类 React.addons.update，updeep，或者使用原生支持深度更新的库 Immutable。最后，时刻谨记永远不要在克隆 state 前修改它。</li>
</ul>
</li>
<li><p>单一的庞大的reducer的拆分</p>
<ul>
<li>这块设计也不好做，会让人疑惑</li>
<li>官方给的demo中直接按state的内容区分，我觉得这样做不好，如果后期有跨内容的情况，就比较奇怪了。官方给的combineReducers方案，也只是减少代码量，本质没有变化，state还是拆分处理，路由还是业务逻辑自己来做。</li>
<li>解决方案：还是处理一整个state，可以按照约定写reducer类而不是方法，类里按照actionType建方法，架构自动路由并调用。</li>
<li>以前做java架构，路由一定是架构来调用的，目前感觉各大flux框架都是解决问题不彻底。</li>
</ul>
</li>
<li><p>官方建议设计模式：顶层容器组件才对redux有依赖，组件间通过props来传递数据。按照这样设计还是没有解决组件间交互和数据传递的问题。官方react设计建议：react的设计建议：<a href="http://camsong.github.io/redux-in-chinese/docs/basics/UsageWithReact.html" target="_blank" rel="external">http://camsong.github.io/redux-in-chinese/docs/basics/UsageWithReact.html</a></p>
</li>
<li><p>使用connect将state绑定到component。此处有些黑盒了。</p>
</li>
<li><p>异步action用来请求服务端数据,利用middleware增强createStore的dispatch后即支持。</p>
</li>
</ol>
]]></content>
    <summary type="html">
    <![CDATA[<p>社区内比较受推崇，因为用起来相对比较简单<br><img src="media/2869996312-56737fb328792_articlex.png" alt="2869996312-56737fb328792_articlex"></p>
<p>特性：</p>
<u]]>
    </summary>
    
  </entry>
  
  <entry>
    <title><![CDATA[JavaScript函数声明与函数表达式写法的区别]]></title>
    <link href="http://robbinhan.github.io/2015/12/25/2015-12-25/"/>
    <id>http://robbinhan.github.io/2015/12/25/2015-12-25/</id>
    <published>2015-12-25T07:27:19.000Z</published>
    <updated>2016-01-16T04:43:14.000Z</updated>
    <content type="html"><![CDATA[<p>表面上的差异是“先与后”，使用函数表达式的方式，调用必须在表达式之后，而函数声明则无关前后问题。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">alert(foo); <span class="comment">// function foo() &#123;&#125;</span></span><br><span class="line">alert(bar); <span class="comment">// undefined</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>) </span>&#123;&#125;</span><br><span class="line"><span class="keyword">var</span> bar = <span class="function"><span class="keyword">function</span> <span class="title">bar_fn</span>(<span class="params"></span>) </span>&#123;&#125;;</span><br><span class="line">alert(foo); <span class="comment">// function foo() &#123;&#125;</span></span><br><span class="line">alert(bar); <span class="comment">// function bar_fn() &#123;&#125;</span></span><br></pre></td></tr></table></figure>
<p>可以看到 foo 的声明是写在 alert 之后，仍然可以被正确调用，因为 JavaScript 解释器会将其提升到 alert 前面，而以函数表达式创建的函数 bar 则不享受此待遇。</p>
<p>那么bar 究竟有没有被提升呢，其实用 var 声明的变量都会被提升，只不过是被先赋值为 undefined 罢了，所以第二个 alert 弹出了 undefined。这具体要涉及到js的<em>变量对象</em>和<em>执行环境</em>概念</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">hereOrThere</span>(<span class="params"></span>) </span>&#123; <span class="comment">//function statement</span></span><br><span class="line">  <span class="keyword">return</span> <span class="string">'here'</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">alert(hereOrThere()); <span class="comment">// alerts 'there'</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">hereOrThere</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="string">'there'</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>以上代码hereOrThere函数声明两次，声明首先提升了优先级，并且第二次声明覆盖了第一次声明。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> hereOrThere = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123; <span class="comment">// function expression</span></span><br><span class="line">  <span class="keyword">return</span> <span class="string">'here'</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">alert(hereOrThere()); <span class="comment">// alerts 'here'</span></span><br><span class="line"></span><br><span class="line">hereOrThere = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="string">'there'</span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>以上代码hereOrThere表达式写法两次。</p>
<p>执行顺序是解释器先声明hereOrThere变量，此时值是undefined，然后将返回here的函数赋值，接着alert调用。这里因为是声明的变量，而js中不会对变量提升优先级，所以是顺序执行。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>表面上的差异是“先与后”，使用函数表达式的方式，调用必须在表达式之后，而函数声明则无关前后问题。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class=]]>
    </summary>
    
  </entry>
  
  <entry>
    <title><![CDATA[Redis数据清理导致连接超时]]></title>
    <link href="http://robbinhan.github.io/2015/12/23/2015-12-24/"/>
    <id>http://robbinhan.github.io/2015/12/23/2015-12-24/</id>
    <published>2015-12-23T07:27:19.000Z</published>
    <updated>2015-12-24T03:13:33.000Z</updated>
    <content type="html"><![CDATA[<p>看到一篇讲解Redis数据清理导致连接超时的问题的文章，之前开发系统时也出现过类似问题，但是一直没有确定具体的原因，当时的情况是crontab下有个每分钟都在执行的php脚本，脚本中是通过redis来做锁的控制，起初一切正常，突然有天脚本“卡住”了，redis中的锁没有删除，导致后续启动的脚本立即被退出；查了日志发现当时出现了连接超时的情况，但是不明白其原因，无奈之下我在程序执行一段后就调用一次ping命令希望能够保持连接，今天的这篇文章也是类似的问题，详细了解到了redis的数据清理机制。</p>
<blockquote>
<p>Redis提供了一套“美好”的过期数据清理机制:</p>
<p>主动过期: Redis对数据是惰性过期，当一个key到了过期时间，Redis也不会马上清理，但如果这个key过期后被再次访问，Redis就会主动将它清理掉。</p>
<p>被动过期: 如果过期的Key一直没被访问，Redis也不会一直把它放那不管，它会每秒10次的执行以下的清理工作：</p>
<p>随机从所有带有过期时间的Key里取出20个<br>如果发现有过期的，就清理<br>如果这里有25%的Key都是过期的，就继续回到第一步再来一次</p>
<p>这套过期机制设计的很赞，可以这样理解：如果当前有超过1/4的Key是过期的话，就不停地清理，直到只剩下1/4不到的Key是要过期的为止，然后就慢慢地随机抽查着清理。</p>
</blockquote>
<p>作者后来的解决方法是在业务逻辑中对需要过期处理的key做了分批删除的操作，自己来处理清理数据的工作，避免长时间处理。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>看到一篇讲解Redis数据清理导致连接超时的问题的文章，之前开发系统时也出现过类似问题，但是一直没有确定具体的原因，当时的情况是crontab下有个每分钟都在执行的php脚本，脚本中是通过redis来做锁的控制，起初一切正常，突然有天脚本“卡住”了，redis中的锁没有删除]]>
    </summary>
    
  </entry>
  
  <entry>
    <title><![CDATA[Node技术进阶脑图]]></title>
    <link href="http://robbinhan.github.io/2015/12/23/2015-12-23/"/>
    <id>http://robbinhan.github.io/2015/12/23/2015-12-23/</id>
    <published>2015-12-23T07:27:19.000Z</published>
    <updated>2015-12-23T07:41:31.000Z</updated>
    <content type="html"><![CDATA[<p><img src="http://i.imgur.com/nvmHDJ4.jpg" alt="Nodejs"></p>
]]></content>
    <summary type="html">
    <![CDATA[<p><img src="http://i.imgur.com/nvmHDJ4.jpg" alt="Nodejs"></p>
]]>
    </summary>
    
  </entry>
  
  <entry>
    <title><![CDATA[加密算法]]></title>
    <link href="http://robbinhan.github.io/2015/12/22/2015-12-22/"/>
    <id>http://robbinhan.github.io/2015/12/22/2015-12-22/</id>
    <published>2015-12-22T12:11:19.000Z</published>
    <updated>2015-12-24T02:21:28.000Z</updated>
    <content type="html"><![CDATA[<p>#非对称加密<br>非对称加密具有以下的典型用法：</p>
<ul>
<li>对信息保密，防止中间人攻击：将明文通过接收人的公钥加密，传输给接收人，因为只有接收人拥有对应的私钥，别人不可能拥有或者不可能通过公钥推算出私钥，所以传输过程中无法被中间人截获。只有拥有私钥的接收人才能阅读。此用法通常用于交换对称密钥。</li>
<li>身份验证和防止篡改：权限狗用自己的私钥加密一段授权明文，并将授权明文和加密后的密文，以及公钥一并发送出来，接收方只需要通过公钥将密文解密后与授权明文对比是否一致，就可以判断明文在中途是否被篡改过。此方法用于数字签名。<br>著名的RSA算法就是非对称加密算法，RSA以三个发明人的首字母命名。</li>
</ul>
<p>非对称加密算法如此强大可靠，却有一个弊端，就是加解密比较耗时。</p>
<p>#数字签名</p>
<p>数字签名是非对称加密和摘要算法两者结合。假设，我们有一段授权文本，需要发布，为了防止中途篡改文本内容，保证文本的完整性，以及文本是由指定的权限狗发的。首先，先将文本内容通过摘要算法，得到摘要，再用权限狗的私钥对摘要进行加密得到密文，将源文本、密文、和私钥对应的公钥一并发布即可。那么如何验证呢？</p>
<p>验证方首先查看公钥是否是权限狗的，然后用公钥对密文进行解密得到摘要，将文本用同样的摘要算法得到摘要，两个摘要进行比对，如果相等那么一切正常。这个过程只要有一步出问题就视为无效。</p>
<p>#Base64<br>Base64编码的思想是是采用==64个基本的ASCII码字符对数据进行重新编码==。它将需要编码的数据拆分成字节数组。以3个字节为一组。按顺序排列24 位数据，再把这24位数据分成4组，即每组6位。再在每组的的最高位前补两个0凑足一个字节。这样就把一个3字节为一组的数据重新编码成了4个字节。当所要编码的数据的字节数不是3的整倍数，也就是说在分组时最后一组不够3个字节。这时在最后一组填充1到2个0字节。并在最后编码完成后在结尾添加1到2个 “=”。</p>
<p>例：将对ABC进行BASE64编码：</p>
<ol>
<li><p>首先取ABC对应的ASCII码值。A（65）B（66）C（67）；</p>
</li>
<li><p>再取二进制值A（01000001）B（01000010）C（01000011）；</p>
</li>
<li><p>然后把这三个字节的二进制码接起来（010000010100001001000011）；</p>
</li>
<li><p>再以6位为单位分成4个数据块,并在最高位填充两个0后形成4个字节的编码后的值，（00010000）（00010100）（00001001）（00000011），其中加色部分为真实数据；</p>
</li>
<li><p>再把这四个字节数据转化成10进制数得（16）（20）（9）（3）；</p>
</li>
<li><p>最后根据BASE64给出的64个基本字符表，查出对应的ASCII码字符（Q）（U）（J）（D），这里的值实际就是数据在字符表中的索引。</p>
</li>
</ol>
<p>解码过程就是把4个字节再还原成3个字节再根据不同的数据形式把字节数组重新整理成数据。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>#非对称加密<br>非对称加密具有以下的典型用法：</p>
<ul>
<li>对信息保密，防止中间人攻击：将明文通过接收人的公钥加密，传输给接收人，因为只有接收人拥有对应的私钥，别人不可能拥有或者不可能通过公钥推算出私钥，所以传输过程中无法被中间人截获。只有拥有私钥的接收人]]>
    </summary>
    
  </entry>
  
  <entry>
    <title><![CDATA[程序员最应该有的技能是什么？]]></title>
    <link href="http://robbinhan.github.io/2015/12/21/2015-12-21/"/>
    <id>http://robbinhan.github.io/2015/12/21/2015-12-21/</id>
    <published>2015-12-21T06:11:19.000Z</published>
    <updated>2015-12-21T06:21:59.000Z</updated>
    <content type="html"><![CDATA[<p>本人根据这几年的工作经验及生活经验总结了几点：</p>
<ol>
<li>学习能力，尤其是快速的学习并掌握的能力，技术日新月异，程序员需要每天都吸取养分，不断接收新的信息，不断学习新的技术；比如当你开发项目时领导交给你个任务，但是你之前从没接触过此类技术，不知道从何入手，于是你google了，查到了些解决方法，但是他是个新的东西，时间又比较紧，你就需要快速学习并简单掌握他。</li>
<li>表达能力，也就是能否与其他同事朋友有效的沟通，注意是有效沟通，就是指用最精简的语言表达出100%的意思，表达能力少若些的也能表达自己的意思，但可能就需要花十几分钟或更久；最基础的是与同是技术人员的表达要清楚，快速；其次是同行业的非技术人员，比如产品，运营等；再就是非同行业的完全不懂的人，比如你的爸妈，爷爷奶奶等。</li>
</ol>
]]></content>
    <summary type="html">
    <![CDATA[<p>本人根据这几年的工作经验及生活经验总结了几点：</p>
<ol>
<li>学习能力，尤其是快速的学习并掌握的能力，技术日新月异，程序员需要每天都吸取养分，不断接收新的信息，不断学习新的技术；比如当你开发项目时领导交给你个任务，但是你之前从没接触过此类技术，不知道从何入手，于]]>
    </summary>
    
  </entry>
  
  <entry>
    <title><![CDATA[技术迭代]]></title>
    <link href="http://robbinhan.github.io/2015/10/30/%E6%8A%80%E6%9C%AF%E8%BF%AD%E4%BB%A3/"/>
    <id>http://robbinhan.github.io/2015/10/30/技术迭代/</id>
    <published>2015-10-30T09:45:31.000Z</published>
    <updated>2015-10-30T09:47:24.000Z</updated>
    <content type="html"><![CDATA[<p>有段时间没写了，至于之前的react+redux项目后来就实现了右键菜单，然后在好雨云的日本亚马逊节点部署了下，因为我的代码中用到了Google的API，之前也一直在找海外节点的云服务商，正好在v2ex上看到，基本部署还是免费，客服支持也很及时，好评，好评，好评。</p>
<p>进入正题，今天看到之前关注的一个rails大牛表示放弃rails，而转到meteor，rails的社区好像正在走向末路，前几年还是很火的社区，这两年随着各种海外公司的应用，再弃之，包括rails框架本身的一些问题，有些停步不前，人气越来越少；感觉就像几年前的PHP社区，好在PHP现在有个laravel，社区的人气好像有多了起来，github上的star数也是近2w，在PHP框架中排最前，而且仅仅用了2两年不到的时间，所以也许rails或者说Ruby社区也会重新归来。</p>
<p>现在的服务端技术越来越多，热点也在不断的变化，以前是PHP、后来是rails，然后是nodejs，再来是golang，近期又是react、meteor等，这样频繁的变化，作为程序员的我们该怎么选择？像这样的问题大家网上Google下一大把，各种社区论坛都会有，每人都有自己的建议；在我看来不用去过多的猜测将来什么会火，什么会成为主流技术，只要跟随趋势，就和股票市场一样，尽量不要去抄底，博反弹，行情不好，怎么抄都不是底，而是应该跟随趋势，等到趋势、热点都确认了，你抄进去跟着吃点肉就好，大多数投资股票失败的都是想要抄底，但是也都死在『抄底』；当然技术圈可能不存在大行情不好的情况，但是热点确实不断在变的，我们要做的是热点确认后能快速掌握，灵活切换，这才是程序员的核心价值，能做到这点应该已经是大牛；但是作为兴趣爱好或者时间充裕多掌握些自然也不是坏事。^_^</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>有段时间没写了，至于之前的react+redux项目后来就实现了右键菜单，然后在好雨云的日本亚马逊节点部署了下，因为我的代码中用到了Google的API，之前也一直在找海外节点的云服务商，正好在v2ex上看到，基本部署还是免费，客服支持也很及时，好评，好评，好评。</p>
]]>
    </summary>
    
  </entry>
  
  <entry>
    <title><![CDATA[Redux学习总结2]]></title>
    <link href="http://robbinhan.github.io/2015/10/01/Redux%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%932/"/>
    <id>http://robbinhan.github.io/2015/10/01/Redux学习总结2/</id>
    <published>2015-10-01T08:23:19.000Z</published>
    <updated>2015-10-01T08:49:09.000Z</updated>
    <content type="html"><![CDATA[<div id="badge-container-robbinhan-master-undefined" class="hexo-github" style="width: 100%"></div>
<script src="/hexo-github/badge.js"></script>
<script type="text/javascript">
  loadStyle("/hexo-github/style.css");
  loadStyle("/hexo-github/octicons/octicons.css");
  new Badge("#badge-container-robbinhan-master-undefined", "robbinhan", "master", "", false);
</script>

<p>今天看到laracasts上的react视频，用react实现了一个简单的GistBox，正好我又在学redux，就试着react+redux做了个小Demo，顺便总结下遇到的坑。</p>
<p><img src="http://ww3.sinaimg.cn/large/6e0aaaa0gw1ewlpvh6nvxj205n0gz74v.jpg" alt="目录结构"></p>
<p>在<code>assets</code>目录下写代码，再通过gulp将代码实时编译到<code>public/js</code>下的<code>app.js</code></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">'react'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; Provider &#125; <span class="keyword">from</span> <span class="string">'react-redux'</span>;</span><br><span class="line"><span class="keyword">import</span> App <span class="keyword">from</span> <span class="string">'./containers/App'</span>;</span><br><span class="line"><span class="keyword">import</span> configureStore <span class="keyword">from</span> <span class="string">'./store/store'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> store = configureStore;</span><br><span class="line"></span><br><span class="line">React.render(</span><br><span class="line">    <span class="xml"><span class="tag">&lt;<span class="title">Provider</span> <span class="attribute">store</span>=<span class="value">&#123;store&#125;</span> &gt;</span></span><br><span class="line">        &#123;() =&gt; <span class="tag">&lt;<span class="title">App</span> /&gt;</span> &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="title">Provider</span>&gt;</span>,</span><br><span class="line">    document.getElementById('app'));</span></span><br></pre></td></tr></table></figure>
<p><code>index.js</code>中将store传入<code>App</code>组件</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">import</span> &#123; connect &#125; <span class="keyword">from</span> <span class="string">'react-redux'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; fetchGists,changeUserName &#125; <span class="keyword">from</span> <span class="string">'../actions/user'</span>;</span><br><span class="line"><span class="keyword">import</span> UserBox <span class="keyword">from</span> <span class="string">'../components/UserBox'</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">mapStateToProps</span>(<span class="params">state</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'connet state'</span>,state)</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    username: state.gists.username,</span><br><span class="line">    items: state.gists.items || []</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">mapDispatchToProps</span>(<span class="params">dispatch</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    handlerSubmit: (username) =&gt; dispatch(fetchGists(username)),</span><br><span class="line">    handlerChange: (username) =&gt; dispatch(changeUserName(username))</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> connect(</span><br><span class="line">  mapStateToProps,</span><br><span class="line">  mapDispatchToProps</span><br><span class="line">)(UserBox);</span><br></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> axios <span class="keyword">from</span> <span class="string">'axios'</span>;</span><br><span class="line"><span class="comment">/*</span><br><span class="line"> * action types</span><br><span class="line"> */</span></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">showGistsRequest</span> (<span class="params">username</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">        type: <span class="string">'SHOW_GISTS_REQUEST'</span>,</span><br><span class="line">        username</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">showGistsSuccess</span> (<span class="params">username,json</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">        type: <span class="string">'SHOW_GISTS_SUCCESS'</span>,</span><br><span class="line">        username,</span><br><span class="line">        posts: json.map(child =&gt; child.html_url),<span class="comment">//function(child)&#123;return child.data&#125;</span></span><br><span class="line">            receivedAt: <span class="built_in">Date</span>.now()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">showGistsFail</span> (<span class="params">username</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">        type: <span class="string">'SHOW_GISTS_FAIL'</span>,</span><br><span class="line">        username</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">changeUserName</span> (<span class="params">username</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    type: <span class="string">'CHANGE_USER_NAME'</span>,</span><br><span class="line">    username</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 来看一下我们写的第一个 thunk action creator！</span></span><br><span class="line"><span class="comment">// 虽然内部操作不同，你可以像其它 action creator 一样使用它：</span></span><br><span class="line"><span class="comment">// store.dispatch(fetchPosts('reactjs'));</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">fetchGists</span>(<span class="params">username</span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Thunk middleware 知道如何处理函数。</span></span><br><span class="line">  <span class="comment">// 这里把 dispatch 方法通过参数的形式参给函数，</span></span><br><span class="line">  <span class="comment">// 以此来让它自己也能 dispatch action。</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params">dispatch</span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 首次 dispatch：更新应用的 state 来通知</span></span><br><span class="line">    <span class="comment">// API 请求发起了。</span></span><br><span class="line"></span><br><span class="line">    dispatch(showGistsRequest(username));</span><br><span class="line"></span><br><span class="line">    <span class="comment">// thunk middleware 调用的函数可以有返回值，</span></span><br><span class="line">    <span class="comment">// 它会被当作 dispatch 方法的返回值传递。</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 这个案例中，我们返回一个等待处理的 promise。</span></span><br><span class="line">    <span class="comment">// 这并不是 redux middleware 所必须的，但是我们的一个约定。</span></span><br><span class="line">    <span class="comment">// </span></span><br><span class="line">    axios.get(<span class="string">`https://api.github.com/users/<span class="subst">$&#123;username&#125;</span>/gists`</span>)</span><br><span class="line">    .then(response =&gt; response.data)</span><br><span class="line">    .then(<span class="function"><span class="keyword">function</span>(<span class="params">json</span>) </span>&#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">'response json'</span>,json); </span><br><span class="line">      dispatch(showGistsSuccess(username, json)); </span><br><span class="line">    &#125;).catch(<span class="function"><span class="keyword">function</span>(<span class="params">ex</span>) </span>&#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">'parsing failed'</span>, ex)</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">      <span class="comment">// 在实际应用中，还需要</span></span><br><span class="line">      <span class="comment">// 捕获网络请求的异常。</span></span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><code>connect</code>会将UserBox和store连接；在mapStateToProps中的state参数就是store.getState方法的返回值，mapDispatchToProps方法中定义了一些方法与dispatch绑定，这些方法和state都会通过props传递给子组件</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React, &#123; Component &#125; <span class="keyword">from</span> <span class="string">'react'</span>;</span><br><span class="line"><span class="keyword">import</span> GistForm <span class="keyword">from</span> <span class="string">'./GistForm'</span>;</span><br><span class="line"><span class="keyword">import</span> GistDiv <span class="keyword">from</span> <span class="string">'./GistDiv'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; fetchGists &#125; <span class="keyword">from</span> <span class="string">'../actions/user'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="class"><span class="keyword">class</span> <span class="title">UserBox</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">  constructor(props) &#123;</span><br><span class="line">    <span class="keyword">super</span>(props);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  render() &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      <span class="xml"><span class="tag">&lt;<span class="title">div</span> <span class="attribute">className</span>=<span class="value">"userBox"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="title">h1</span>&gt;</span>GistBox<span class="tag">&lt;/<span class="title">h1</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="title">GistForm</span> <span class="attribute">username</span>=<span class="value">&#123;this.props.username&#125;</span> </span><br><span class="line">        <span class="attribute">handlerSubmit</span>=<span class="value">&#123;this.props.handlerSubmit&#125;</span>   </span><br><span class="line">        <span class="attribute">handlerChange</span>=<span class="value">&#123;this.props.handlerChange&#125;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="title">GistDiv</span> <span class="attribute">items</span>=<span class="value">&#123;this.props.items&#125;</span> /&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="title">div</span>&gt;</span></span><br><span class="line">    )</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>UserBox中将上层通过props传递的方法和参数传递给子组件处理</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React, &#123; Component &#125; <span class="keyword">from</span> <span class="string">'react'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="class"><span class="keyword">class</span> <span class="title">UserList</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">  render() &#123;</span><br><span class="line">    <span class="keyword">let</span> self = <span class="keyword">this</span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'gistform'</span>,self.props)</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      <span class="xml"><span class="tag">&lt;<span class="title">form</span> <span class="attribute">onSubmit</span>=<span class="value">&#123;</span> <span class="attribute">function</span>(<span class="attribute">e</span>) &#123; <span class="attribute">e.preventDefault</span>(); <span class="attribute">self.props.handlerSubmit</span>(<span class="attribute">self.props.username</span>) &#125; &#125; &gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="title">input</span> <span class="attribute">name</span>=<span class="value">"username"</span> </span><br><span class="line">        <span class="attribute">value</span>=<span class="value">&#123;this.props.username&#125;</span> </span><br><span class="line">        <span class="attribute">onChange</span>=<span class="value">&#123;(e)</span> =&gt;</span> self.props.handlerChange(e.target.value)&#125; /&gt;</span><br><span class="line">        <span class="tag">&lt;<span class="title">button</span>&gt;</span>获取<span class="tag">&lt;/<span class="title">button</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="title">form</span>&gt;</span></span><br><span class="line">    )</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; showGistsRequest,showGistsSuccess,showGistsFail &#125; <span class="keyword">from</span> <span class="string">'../actions/user'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; combineReducers &#125; <span class="keyword">from</span> <span class="string">'redux'</span>;</span><br><span class="line"><span class="comment">/**</span><br><span class="line"> * reducer中写每个action的业务逻辑</span><br><span class="line"> * @param  &#123;[type]&#125; state  [description]</span><br><span class="line"> * @param  &#123;[type]&#125; action [description]</span><br><span class="line"> * @return &#123;[type]&#125;        [description]</span><br><span class="line"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">gets</span>(<span class="params">state = &#123;</span><br><span class="line">  isFetching: false,</span><br><span class="line">  items: []</span><br><span class="line">&#125;, action</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">switch</span> (action.type) &#123;</span><br><span class="line">  <span class="keyword">case</span> <span class="string">'SHOW_GISTS_REQUEST'</span>:</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">Object</span>.assign(&#123;&#125;, state, &#123;</span><br><span class="line">      isFetching: <span class="literal">true</span></span><br><span class="line">    &#125;);</span><br><span class="line">  <span class="keyword">case</span> <span class="string">'SHOW_GISTS_SUCCESS'</span>:</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">Object</span>.assign(&#123;&#125;, state, &#123;</span><br><span class="line">      isFetching: <span class="literal">false</span>,</span><br><span class="line">      items: action.posts,</span><br><span class="line">      lastUpdated: action.receivedAt</span><br><span class="line">    &#125;);</span><br><span class="line">  <span class="keyword">case</span> <span class="string">'SHOW_GISTS_FAIL'</span>:</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">Object</span>.assign(&#123;&#125;, state, &#123;</span><br><span class="line">      isFetching: <span class="literal">false</span></span><br><span class="line">    &#125;);</span><br><span class="line">  <span class="keyword">default</span>:</span><br><span class="line">    <span class="keyword">return</span> state;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getGists</span>(<span class="params">state = &#123;username:'robbinhan',items:[]&#125;, action</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">switch</span> (action.type) &#123;</span><br><span class="line">  <span class="keyword">case</span> <span class="string">'SHOW_GISTS_REQUEST'</span>:</span><br><span class="line">  <span class="keyword">case</span> <span class="string">'SHOW_GISTS_SUCCESS'</span>:</span><br><span class="line">  <span class="keyword">case</span> <span class="string">'SHOW_GISTS_FAIL'</span>:</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">Object</span>.assign(&#123;&#125;, state, gets(state[action.username], action) );</span><br><span class="line">    <span class="keyword">case</span> <span class="string">'CHANGE_USER_NAME'</span>:</span><br><span class="line">      <span class="keyword">return</span> <span class="built_in">Object</span>.assign(&#123;&#125;, state,&#123;</span><br><span class="line">        username: action.username</span><br><span class="line">      &#125;);</span><br><span class="line">  <span class="keyword">default</span>:</span><br><span class="line">    <span class="keyword">return</span> state;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> gistReducer = combineReducers(&#123;</span><br><span class="line">  gists : getGists</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> gistReducer;</span><br></pre></td></tr></table></figure>
<p>GistForm组件中在input修改输入内容时触发onChange事件，将value传给之前mapDispatchToProps中定义的handlerChange方法，handlerChange方法dispatch给action中的changeUserName方法，并通过reducer来修改state中的属性，onSubmit事件同理，只是其中使用了异步的处理方式，有关异步处理的具体说明请看<a href="http://camsong.github.io/redux-in-chinese/docs/advanced/AsyncActions.html" target="_blank" rel="external">官方手册</a></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React, &#123; Component &#125; <span class="keyword">from</span> <span class="string">'react'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="class"><span class="keyword">class</span> <span class="title">GistDiv</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">  render() &#123;</span><br><span class="line">    <span class="keyword">let</span> self = <span class="keyword">this</span></span><br><span class="line">    <span class="keyword">let</span> row = self.props.items.map(<span class="function"><span class="keyword">function</span> (<span class="params">url,index</span>) </span>&#123;</span><br><span class="line">      <span class="keyword">return</span>  <span class="xml"><span class="tag">&lt;<span class="title">div</span>&gt;</span><span class="tag">&lt;<span class="title">a</span> <span class="attribute">href</span>=<span class="value">&#123;url&#125;</span> <span class="attribute">target</span>=<span class="value">"_blank"</span>&gt;</span>&#123;index&#125;<span class="tag">&lt;/<span class="title">a</span>&gt;</span><span class="tag">&lt;/<span class="title">div</span>&gt;</span></span><br><span class="line">    &#125;)</span><br><span class="line">    console.log(row)</span><br><span class="line">    return (</span><br><span class="line">     <span class="tag">&lt;<span class="title">div</span>&gt;</span></span><br><span class="line">      &#123; row &#125;</span><br><span class="line">     <span class="tag">&lt;/<span class="title">div</span>&gt;</span></span><br><span class="line">    )</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><code>GistDiv</code>组件就没什么好说的了，map处理items的数据，渲染出链接</p>
]]></content>
    <summary type="html">
    <![CDATA[<div id="badge-container-robbinhan-master-undefined" class="hexo-github" style="width: 100%"></div>
<script src="/hexo-github/badge.js"></sc]]>
    </summary>
    
  </entry>
  
  <entry>
    <title><![CDATA[Redux学习总结1]]></title>
    <link href="http://robbinhan.github.io/2015/09/30/Redux%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%931/"/>
    <id>http://robbinhan.github.io/2015/09/30/Redux学习总结1/</id>
    <published>2015-09-29T23:31:27.000Z</published>
    <updated>2015-09-30T05:26:39.000Z</updated>
    <content type="html"><![CDATA[<p>首先Redux是flux思想的一种实现，他的概念中整个APP在runtime中只有一个全局的<code>store</code>，所有的<code>state</code>都存储在这个<code>store</code>，通过<code>action</code>来改变状态，当状态改变时触发对应的<code>reducer</code>，<code>reducer</code>函数实现对应<code>action</code>的业务逻辑，然后返回一个新的<code>state</code>对象，直接上示例代码解释。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//components/UserBox.js</span></span><br><span class="line"><span class="keyword">import</span> React, &#123; Component,PropTypes &#125; <span class="keyword">from</span> <span class="string">'react'</span>;</span><br><span class="line"><span class="keyword">import</span> UserList <span class="keyword">from</span> <span class="string">'../components/UserList'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="class"><span class="keyword">class</span> <span class="title">UserBox</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">  render() &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      <span class="xml"><span class="tag">&lt;<span class="title">div</span> <span class="attribute">className</span>=<span class="value">"userBox"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="title">h1</span>&gt;</span>用户列表<span class="tag">&lt;/<span class="title">h1</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="title">UserList</span> <span class="attribute">data</span>=<span class="value">&#123;this.props.data&#125;</span> /&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="title">div</span>&gt;</span></span><br><span class="line">    )</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>Userbox是其中的一个子组件，再下一层的子组件就不一一贴出来了，学过react的应该都能理解UserList那行代码，那么其中的<code>this.props.data</code>这个数据从哪里来呢</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//containers/UserBox.js</span></span><br><span class="line"><span class="keyword">import</span> &#123; connect &#125; <span class="keyword">from</span> <span class="string">'react-redux'</span>;</span><br><span class="line"><span class="keyword">import</span> UserBox <span class="keyword">from</span> <span class="string">'../components/UserBox'</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Which part of the Redux global state does our component want to receive as props?</span></span><br><span class="line"><span class="comment">// 给子组件的props对象定义数据</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">mapStateToProps</span>(<span class="params">state</span>) </span>&#123;</span><br><span class="line">	<span class="built_in">console</span>.log(<span class="string">'mapStateToProps'</span>,state)</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    data: state.users</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Which action creators does it want to receive by props?</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">mapDispatchToProps</span>(<span class="params">dispatch</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> connect(</span><br><span class="line">  mapStateToProps,</span><br><span class="line">  mapDispatchToProps</span><br><span class="line">)(UserBox);</span><br></pre></td></tr></table></figure>
<p>这里通过<code>react-redux</code>的<code>connect</code>模块与react的components连接，并传入<code>mapStateToProps</code>和<code>mapDispatchToProps</code>方法(关于connect的详细说明<a href="https://github.com/rackt/react-redux/blob/master/docs/api.md#connectmapstatetoprops-mapdispatchtoprops-mergeprops-options" target="_blank" rel="external">看这里</a>)，<code>mapStateToProps</code>方法返回一个对象，<code>connet</code>会把这个对象的属性都map到子组件的<code>this.props</code>对象中，所以我在子组件可以通过<code>this.props.data</code>获取到这里的<code>state.users</code>；那么<code>mapStateToProps</code>方法接收的state参数是从哪里来的？</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//reducers/user.js</span></span><br><span class="line"><span class="keyword">import</span> &#123; SET_VISIBILITY_FILTER,VisibilityFilters &#125; <span class="keyword">from</span> <span class="string">'../actions/user'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; combineReducers &#125; <span class="keyword">from</span> <span class="string">'redux'</span>;</span><br><span class="line"><span class="keyword">const</span> &#123; SHOW_ALL &#125; = VisibilityFilters;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span><br><span class="line"> * reducer中写每个action的业务逻辑</span><br><span class="line"> * @param  &#123;[type]&#125; state  [description]</span><br><span class="line"> * @param  &#123;[type]&#125; action [description]</span><br><span class="line"> * @return &#123;[type]&#125;        [description]</span><br><span class="line"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">visibilityFilter</span>(<span class="params">state = SHOW_ALL, action</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">switch</span> (action.type) &#123;</span><br><span class="line">  <span class="keyword">case</span> SET_VISIBILITY_FILTER:</span><br><span class="line">    <span class="keyword">return</span> action.filter;</span><br><span class="line">  <span class="keyword">default</span>:</span><br><span class="line">    state = [&#123;name:<span class="string">'robbin'</span>,id:<span class="number">1</span>&#125;,&#123;name:<span class="string">'moke'</span>,id:<span class="number">2</span>&#125;]</span><br><span class="line">    <span class="keyword">return</span> state;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> userApp = combineReducers(&#123;</span><br><span class="line">  users : visibilityFilter</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> userApp;</span><br></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//store/store.js</span></span><br><span class="line"><span class="keyword">import</span> &#123; createStore &#125; <span class="keyword">from</span> <span class="string">'redux'</span>;</span><br><span class="line"><span class="keyword">import</span> userReducer <span class="keyword">from</span> <span class="string">'../reducers/user'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> userStore = createStore(userReducer);</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> userStore;</span><br></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//im.js</span></span><br><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">'react'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; Provider &#125; <span class="keyword">from</span> <span class="string">'react-redux'</span>;</span><br><span class="line"><span class="keyword">import</span> UserBox <span class="keyword">from</span> <span class="string">'./containers/UserBox'</span>;</span><br><span class="line"><span class="keyword">import</span> userStore <span class="keyword">from</span> <span class="string">'./store/store'</span>;</span><br><span class="line"></span><br><span class="line">React.render(</span><br><span class="line">    <span class="xml"><span class="tag">&lt;<span class="title">Provider</span> <span class="attribute">store</span>=<span class="value">&#123;userStore&#125;</span> &gt;</span></span><br><span class="line">        &#123;() =&gt; <span class="tag">&lt;<span class="title">UserBox</span> /&gt;</span> &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="title">Provider</span>&gt;</span>,</span><br><span class="line">    document.getElementById('im'));</span></span><br></pre></td></tr></table></figure>
<p>state其实就是reducer中返回的对象，我在user的reducer中返回了userApp，其中就包含了users属性，根据不同的action的type处理业务逻辑后，返回新的state对象；在store中将它封装起来，在im.js中import进来，render时通过provider将他传入组件。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>首先Redux是flux思想的一种实现，他的概念中整个APP在runtime中只有一个全局的<code>store</code>，所有的<code>state</code>都存储在这个<code>store</code>，通过<code>action</code>来改变状态]]>
    </summary>
    
  </entry>
  
  <entry>
    <title><![CDATA[Laravel+React+Redux]]></title>
    <link href="http://robbinhan.github.io/2015/09/29/Laravel-React-Redux/"/>
    <id>http://robbinhan.github.io/2015/09/29/Laravel-React-Redux/</id>
    <published>2015-09-29T15:47:07.000Z</published>
    <updated>2015-09-29T16:05:03.000Z</updated>
    <content type="html"><![CDATA[<div id="badge-container-robbinhan-chat-42b19f5574beb7f6c76eb8f6575881d9641b99fe" class="hexo-github" style="width: 100%"></div>
<script src="/hexo-github/badge.js"></script>
<script type="text/javascript">
  loadStyle("/hexo-github/style.css");
  loadStyle("/hexo-github/octicons/octicons.css");
  new Badge("#badge-container-robbinhan-chat-42b19f5574beb7f6c76eb8f6575881d9641b99fe", "robbinhan", "chat", "42b19f5574beb7f6c76eb8f6575881d9641b99fe", false);
</script>

<p>之前93阅兵假期间，花了两天时间用laravel+vuejs+nodejs写了个实时聊天的的雏形。最近临近国庆放假想花些时间学习下react，目前初步把react都学习了一遍，学习过程中也了解到很多新的技术，例如虚拟dom，redux，babel，es5-shim，lodash等。</p>
<p>另外还有flux思想，flux不是个框架，是个架构思想，和mvc不同；redux是对flux思想的一种实现，其余比较火的还有reflux，但是最好还是都先了解下flux思想的内容，其余的实现主要是对facebook的flux使用的简化。</p>
<p>期间也踩过了许多坑之后有时间会再写一篇总结，这里先放些相关的资源链接。</p>
<ul>
<li><a href="http://www.tudou.com/plcover/ah20h1-t4V4/" target="_blank" rel="external">React.js中文视频教程，视频最好配合官网教程一起看</a></li>
<li><a href="https://facebook.github.io/react/" target="_blank" rel="external">官网教程(英文原版)</a></li>
<li><a href="http://reactjs.cn/react/index.html" target="_blank" rel="external">react中文教程</a></li>
<li><a href="http://react-china.org/" target="_blank" rel="external">react中文社区</a></li>
<li><a href="http://camsong.github.io/redux-in-chinese/" target="_blank" rel="external">redux文档(中文，英文原版在此链接终有)</a></li>
</ul>
]]></content>
    <summary type="html">
    <![CDATA[<div id="badge-container-robbinhan-chat-42b19f5574beb7f6c76eb8f6575881d9641b99fe" class="hexo-github" style="width: 100%"></div>
<script src]]>
    </summary>
    
  </entry>
  
  <entry>
    <title><![CDATA[php在cli环境下的exit调用问题]]></title>
    <link href="http://robbinhan.github.io/2015/09/29/2015-06-20-php-cli-exit/"/>
    <id>http://robbinhan.github.io/2015/09/29/2015-06-20-php-cli-exit/</id>
    <published>2015-09-29T15:23:22.000Z</published>
    <updated>2015-09-29T15:23:22.000Z</updated>
    <content type="html"><![CDATA[<p>  之前因为汇总数据，写了个shell脚本通过wget方式拉取日志，然后insert到MySQL中，后来由于各种问题重写了个PHP版本（其中各种问题这里就不提了，内部团队分享过）。</p>
<p>  但是仍然遇到了些问题，最奇葩的是进程莫名终止，由于脚本是crontab每分钟启动，终止也不是必现，可能几天就会出现一次，也可能几月出现一次。</p>
<p>后来怀疑可能是redis连接终端导致用于加锁的key没有删除，以至于后面启动的脚本执行失败，因为在发现此问题之前我在redis的server端设置30秒闲置就主动断开连接，而日志中显示程序也的确执行了30秒+；于是我就给程序加上一段ping的调用，希望保持连接，也算消停了一段时间。（我的脚本中通过redis给程序执行加锁，日志必须顺序导入，同一时间不能有多个程序执行）。</p>
<p>上周又发生了程序莫名终止的情况，后来我在恢复数据时偶然发现当第一个进程执行了超过一分钟时，第二个进程启动后由于判断到还有程序在执行要退出，调用了exit函数后第一个进程也随即终止了，我怀疑在cli下会不会调用exit会将所有执行中的命令行PHP程序退出？后来我修改成return就没发生类似问题。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>  之前因为汇总数据，写了个shell脚本通过wget方式拉取日志，然后insert到MySQL中，后来由于各种问题重写了个PHP版本（其中各种问题这里就不提了，内部团队分享过）。</p>
<p>  但是仍然遇到了些问题，最奇葩的是进程莫名终止，由于脚本是crontab每分]]>
    </summary>
    
  </entry>
  
  <entry>
    <title><![CDATA[用swift学习IOS开发的一点总结(一)]]></title>
    <link href="http://robbinhan.github.io/2015/09/29/2015-05-16-learn-swift-1/"/>
    <id>http://robbinhan.github.io/2015/09/29/2015-05-16-learn-swift-1/</id>
    <published>2015-09-29T15:21:51.000Z</published>
    <updated>2015-09-29T15:21:51.000Z</updated>
    <content type="html"><![CDATA[<p>先列出总结的知识点</p>
<ul>
<li>?和！</li>
<li>as向下转换</li>
<li>var 和 let的区别</li>
<li>weak 和 unowned</li>
</ul>
<h2 id="?和！">?和！</h2><blockquote>
<p>swift中的这点可能是借鉴了Ruby(或是其他语言，但是小弟懂的少，还有就是Apple内部好像蛮喜欢Ruby，不然也不会有MacRuby O(∩<em>∩)O~~</em>)；问号代表Optional，也可以认为是将这个值初始化为nil(nil这个对象代表空)，再后面写代码逻辑时需要对此值做if判断是否是nil。而！基本正好相反，它代表强制做某件事。</p>
<p>所以在开发时可能可能会遇到</p>
</blockquote>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">fatal error: unexpectedly found <span class="literal">nil</span> <span class="keyword">while</span> unwrapping an <span class="type">Optional</span> value</span><br></pre></td></tr></table></figure>
<blockquote>
<p>这种错误一般是运行中发生，表示在处理一个Optional的值，但是这个是nil</p>
</blockquote>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bound value <span class="keyword">in</span> a conditional binding must be of optional type</span><br></pre></td></tr></table></figure>
<blockquote>
<p>这种错误一般是编译时候发生，表示在if判断的时候遇到，因为判断的值不是Optional初始化过的。</p>
</blockquote>
<p><a href="http://letsswift.com/2014/06/swift-questionmark-exclamatorymark/" target="_blank" rel="external">详细讲解请看这篇转载</a></p>
<h2 id="as向下转型">as向下转型</h2><blockquote>
<p>比方string to NSString 就用 as 转<br><a href="http://c.biancheng.net/cpp/html/2288.html" target="_blank" rel="external">Swift类型转换</a></p>
</blockquote>
<h2 id="var_和_let的区别">var 和 let的区别</h2><blockquote>
<p>var声明变量，let声明常量</p>
</blockquote>
<h2 id="weak_和_unowned">weak 和 unowned</h2><p><a href="http://swifter.tips/retain-cycle/" target="_blank" rel="external">内存管理，WEAK 和 UNOWNED</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>先列出总结的知识点</p>
<ul>
<li>?和！</li>
<li>as向下转换</li>
<li>var 和 let的区别</li>
<li>weak 和 unowned</li>
</ul>
<h2 id="?和！">?和！</h2><blockquote>
<p>]]>
    </summary>
    
      <category term="ios" scheme="http://robbinhan.github.io/tags/ios/"/>
    
      <category term="swift" scheme="http://robbinhan.github.io/tags/swift/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[炒股四月总结]]></title>
    <link href="http://robbinhan.github.io/2015/09/29/2015-05-28-chaogu-four-month-summary/"/>
    <id>http://robbinhan.github.io/2015/09/29/2015-05-28-chaogu-four-month-summary/</id>
    <published>2015-09-29T15:11:19.000Z</published>
    <updated>2015-09-29T15:11:19.000Z</updated>
    <content type="html"><![CDATA[<p>今年一月底开了户，正式步入了散户的行列，去年下半年开始只是买了些基金，收益很少，赶上这波牛市所以干错开户去了。起初是在雪球上各位大V推荐，先是买了些银行股，因为胆小买的很少，也就几十几十的赚，后来慢慢买的多了，因为觉得买的多赚的多，当中也被套，被套了心里总觉不好受，就恨不得分分钟刷雪球，希望看到某大V对该股进行评论，四个月来总收益也盈利了20%。</p>
<p>但是总结了下每股的收益发现对于我们这些新的小散在牛市里最好的赚钱方式就是在牛市开始时，找到牛市题材股，然后买题材股中的龙头或者最有潜力的低价股，等到牛市结束时最少也是翻倍的收益，但是其中的每个交易日是非常难熬的。</p>
<p>今日股市又暴跌，传说07年5月30日也是这样的暴跌，账户里仅存一只还是翻红的，考虑再三决定等这波行情起来解套后清仓，但还是会继续投资其他风险略低的品种，如ETF或者基金。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>今年一月底开了户，正式步入了散户的行列，去年下半年开始只是买了些基金，收益很少，赶上这波牛市所以干错开户去了。起初是在雪球上各位大V推荐，先是买了些银行股，因为胆小买的很少，也就几十几十的赚，后来慢慢买的多了，因为觉得买的多赚的多，当中也被套，被套了心里总觉不好受，就恨不得]]>
    </summary>
    
      <category term="A股，投资" scheme="http://robbinhan.github.io/tags/A%E8%82%A1%EF%BC%8C%E6%8A%95%E8%B5%84/"/>
    
      <category term="投资" scheme="http://robbinhan.github.io/categories/%E6%8A%95%E8%B5%84/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[PHP中isset和array_key_exists的用发的区别]]></title>
    <link href="http://robbinhan.github.io/2015/05/10/2015-05-10-isset-and-array_key_exists/"/>
    <id>http://robbinhan.github.io/2015/05/10/2015-05-10-isset-and-array_key_exists/</id>
    <published>2015-05-10T06:06:56.000Z</published>
    <updated>2015-09-29T15:14:33.000Z</updated>
    <content type="html"><![CDATA[<p>平时在PHP判断数组中是否有某个key时都使用isset函数，今天偶然知道isset在判断时，如果key的值等于null时，isset的返回值会是false。这时就可以用上array_key_exists函数来判断，但是不要完全使用这个函数，会影响性能；可以这样写：<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">isset</span>(<span class="variable">$a</span>[<span class="variable">$key</span>])||array_key_exists(<span class="variable">$key</span>,<span class="variable">$a</span>);</span><br></pre></td></tr></table></figure></p>
<p>这样既保留一定性能，也能避免程序中的坑。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>平时在PHP判断数组中是否有某个key时都使用isset函数，今天偶然知道isset在判断时，如果key的值等于null时，isset的返回值会是false。这时就可以用上array_key_exists函数来判断，但是不要完全使用这个函数，会影响性能；可以这样写：<br>]]>
    </summary>
    
      <category term="Development" scheme="http://robbinhan.github.io/categories/Development/"/>
    
      <category term="php" scheme="http://robbinhan.github.io/categories/Development/php/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[api系统设计]]></title>
    <link href="http://robbinhan.github.io/2015/05/02/2015-05-02-api-to-jekyll/"/>
    <id>http://robbinhan.github.io/2015/05/02/2015-05-02-api-to-jekyll/</id>
    <published>2015-05-02T07:01:56.000Z</published>
    <updated>2015-09-29T15:11:19.000Z</updated>
    <content type="html"><![CDATA[<p>公司API系统已经很陈旧，有很多潜在的隐患，所以趁着假期空闲准备重新设计套V2版的。框架已经确定，使用近期刚出的号称最快的PHP微系统<a href="http://lumen.laravel.com/" target="_blank" rel="external">lumen</a>，但是如何才是合格或者标准的API系统呢？</p>
<p>Google一番后在github上找到一份针对larval的api系统的<a href="https://github.com/dingo/api/wiki" target="_blank" rel="external">wiki</a>，可以借鉴参考。但是主要还得兼容V1版的一些东西，不然其他系统改动太大。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>公司API系统已经很陈旧，有很多潜在的隐患，所以趁着假期空闲准备重新设计套V2版的。框架已经确定，使用近期刚出的号称最快的PHP微系统<a href="http://lumen.laravel.com/" target="_blank" rel="external">lum]]>
    </summary>
    
      <category term="Development" scheme="http://robbinhan.github.io/categories/Development/"/>
    
      <category term="php" scheme="http://robbinhan.github.io/categories/Development/php/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[大话西游]]></title>
    <link href="http://robbinhan.github.io/2014/10/25/2014-10-25-westward-journey/"/>
    <id>http://robbinhan.github.io/2014/10/25/2014-10-25-westward-journey/</id>
    <published>2014-10-25T07:55:00.000Z</published>
    <updated>2015-10-01T07:01:42.000Z</updated>
    <content type="html"><![CDATA[<p>曾经有一份真挚的爱情摆在我面前，但我没有珍惜，直到失去后才后悔莫及，人世间最痛苦的事莫过于此，如果上天能够给我一个再来一次的机会我会对那个女孩说我还你，如果非要在这份爱上加一个期限，我希望是一万年。<br>大话西游的台词每一个我们这代人都能背出来，看似喜剧的这部电影带给我们的却是一次次的感慨；20后重温大话西游，20年前是没有看，20年后是一个人看；影院里大家看第一部时都是欢乐，第二部越是接近片尾越是安静；每个人都已猜到结局，却又都不愿猜到结局。紫霞仙子与至尊宝一次次的在我们眼前痛苦分离，也许我们也一次次与曾经的爱人分手，当一生所爱音乐响起我还不愿离去，命运总是捉弄我们，我们又似命运的的狗，也许是我们懦弱，才将这一切归结于命运这个借口。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>曾经有一份真挚的爱情摆在我面前，但我没有珍惜，直到失去后才后悔莫及，人世间最痛苦的事莫过于此，如果上天能够给我一个再来一次的机会我会对那个女孩说我还你，如果非要在这份爱上加一个期限，我希望是一万年。<br>大话西游的台词每一个我们这代人都能背出来，看似喜剧的这部电影带给我们]]>
    </summary>
    
  </entry>
  
  <entry>
    <title><![CDATA[JavaScript 逻辑运算的坑]]></title>
    <link href="http://robbinhan.github.io/2014/08/03/2014-08-03-javascript-logic-operations/"/>
    <id>http://robbinhan.github.io/2014/08/03/2014-08-03-javascript-logic-operations/</id>
    <published>2014-08-03T03:03:00.000Z</published>
    <updated>2015-10-01T07:01:42.000Z</updated>
    <content type="html"><![CDATA[<p>周末两天参加PHP Conf China活动，无意间看到某公司出了一道JS题，现场没有答出，回来后Google了才知道原因。</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">function <span class="title">show</span><span class="params">(a)</span></span><br><span class="line"> </span>&#123;</span><br><span class="line"> 	alert(<span class="number">2</span>&lt;a&lt;<span class="number">3</span>)</span><br><span class="line"> &#125;</span><br><span class="line"> show(<span class="number">1</span>)</span><br></pre></td></tr></table></figure>
<p>此段代码看着应该返回FALSE，因为逻辑上1\&lt;2，但是最终结果却是TRUE，其实JS解析的时候是看成先解析2\&lt;1，此时结果是FALSE，但是FALSE对于JS来说是会转成int型的0（TRUE就是1），然后0\&lt;3的结果就是TRUE了。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>周末两天参加PHP Conf China活动，无意间看到某公司出了一道JS题，现场没有答出，回来后Google了才知道原因。</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span]]>
    </summary>
    
  </entry>
  
  <entry>
    <title><![CDATA[Rails开发总结]]></title>
    <link href="http://robbinhan.github.io/2014/07/26/2014-07-26-rails-development-summary/"/>
    <id>http://robbinhan.github.io/2014/07/26/2014-07-26-rails-development-summary/</id>
    <published>2014-07-26T06:50:00.000Z</published>
    <updated>2015-10-01T07:01:42.000Z</updated>
    <content type="html"><![CDATA[<p>Rails console设置执行环境  RAILS_ENV=production或 -e production</p>
<p>Rails Asset Pipeline<br>rake assets:precompile RAILS_ENV=production时会对production.rb配置文件中config.assets.precompile配置的内容做预编译，此配置设定的是处application.js, application.css.scss以外的需要编译的文件</p>
<p>config.serve_static_assets配置是设定是否由rails自己服务静态文件，默认是true，但是production环境一般都是前端有nginx或Apache反向代理服务器的，所以可以设定为false</p>
<p>config.assets.compile 如果是做了precompile，则此配置需要设置为FALSE，不需要在线编译js或css了</p>
<p>turbolinks并不会真实的刷新页面，而是用 ajax 请求获得目标页面，然后替换 body 内容。具体内容：<a href="http://chloerei.com/2013/07/14/turbolinks-guide/" target="_blank" rel="external">http://chloerei.com/2013/07/14/turbolinks-guide/</a></p>
<p>routes.rb中如果想要对默认的路由做修改，需要写在默认路由的上面才会生效</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>Rails console设置执行环境  RAILS_ENV=production或 -e production</p>
<p>Rails Asset Pipeline<br>rake assets:precompile RAILS_ENV=production时会对pro]]>
    </summary>
    
  </entry>
  
  <entry>
    <title><![CDATA[ruby的block的作用域]]></title>
    <link href="http://robbinhan.github.io/2014/05/07/2014-05-07-ruby-block-scope/"/>
    <id>http://robbinhan.github.io/2014/05/07/2014-05-07-ruby-block-scope/</id>
    <published>2014-05-07T06:42:00.000Z</published>
    <updated>2015-10-01T07:01:42.000Z</updated>
    <content type="html"><![CDATA[<figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">hash = <span class="constant">Hash</span>.new</span><br><span class="line">array = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>]</span><br><span class="line">array.each <span class="keyword">do</span> | val |</span><br><span class="line">	temp_array = <span class="constant">Array</span>.new</span><br><span class="line">	temp_array.push val</span><br><span class="line">  hash[val]=val</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line">puts hash</span><br><span class="line">puts temp_array</span><br></pre></td></tr></table></figure>
<p>最终hash可以正常输入，temp_array会报错。</p>
<p>所以在block外部声明过的变量，block执行时时会把他绑定代入方法中，但是在block内部定义的额外绑定作用域只在其内部有效。</p>
]]></content>
    <summary type="html">
    <![CDATA[<figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class=]]>
    </summary>
    
  </entry>
  
</feed>
